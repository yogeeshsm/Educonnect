// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  uploadedFiles StudyMaterial[]
  downloads     Download[]
  
  @@map("users")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  subjects Subject[]
  files    StudyMaterial[]
  
  @@map("departments")
}

model Semester {
  id        String   @id @default(cuid())
  number    Int      @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  subjects Subject[]
  files    StudyMaterial[]
  
  @@map("semesters")
}

model Subject {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  description  String?
  departmentId String
  semesterId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  semester   Semester   @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  files      StudyMaterial[]
  
  @@map("subjects")
}

model StudyMaterial {
  id          String      @id @default(cuid())
  title       String
  description String?
  fileName    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  tags        String?
  uploadedById String
  departmentId String
  semesterId   String
  subjectId    String?
  isPublic     Boolean     @default(true)
  downloadCount Int        @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  uploadedBy User       @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  department  Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  semester    Semester   @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  subject     Subject?   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  downloads   Download[]
  
  @@map("study_materials")
}

model Download {
  id         String   @id @default(cuid())
  userId     String
  fileId     String
  downloadedAt DateTime @default(now())
  
  // Relations
  user User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  file StudyMaterial  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([userId, fileId])
  @@map("downloads")
}

enum Role {
  ADMIN
  STUDENT
}